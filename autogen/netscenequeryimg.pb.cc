// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netscenequeryimg.proto

#include "netscenequeryimg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace netscenequeryimg {
class NetSceneQueryImgReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetSceneQueryImgReq> _instance;
} _NetSceneQueryImgReq_default_instance_;
class NetSceneQueryImgRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetSceneQueryImgResp> _instance;
} _NetSceneQueryImgResp_default_instance_;
}  // namespace netscenequeryimg
static void InitDefaultsscc_info_NetSceneQueryImgReq_netscenequeryimg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netscenequeryimg::_NetSceneQueryImgReq_default_instance_;
    new (ptr) ::netscenequeryimg::NetSceneQueryImgReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netscenequeryimg::NetSceneQueryImgReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetSceneQueryImgReq_netscenequeryimg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetSceneQueryImgReq_netscenequeryimg_2eproto}, {}};

static void InitDefaultsscc_info_NetSceneQueryImgResp_netscenequeryimg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netscenequeryimg::_NetSceneQueryImgResp_default_instance_;
    new (ptr) ::netscenequeryimg::NetSceneQueryImgResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netscenequeryimg::NetSceneQueryImgResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetSceneQueryImgResp_netscenequeryimg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetSceneQueryImgResp_netscenequeryimg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_netscenequeryimg_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_netscenequeryimg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_netscenequeryimg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_netscenequeryimg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::netscenequeryimg::NetSceneQueryImgReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::netscenequeryimg::NetSceneQueryImgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::netscenequeryimg::NetSceneQueryImgReq, img_bytes_),
  0,
  PROTOBUF_FIELD_OFFSET(::netscenequeryimg::NetSceneQueryImgResp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::netscenequeryimg::NetSceneQueryImgResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::netscenequeryimg::NetSceneQueryImgResp, item_type_),
  PROTOBUF_FIELD_OFFSET(::netscenequeryimg::NetSceneQueryImgResp, item_name_),
  PROTOBUF_FIELD_OFFSET(::netscenequeryimg::NetSceneQueryImgResp, item_desc_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::netscenequeryimg::NetSceneQueryImgReq)},
  { 7, 15, sizeof(::netscenequeryimg::NetSceneQueryImgResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::netscenequeryimg::_NetSceneQueryImgReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::netscenequeryimg::_NetSceneQueryImgResp_default_instance_),
};

const char descriptor_table_protodef_netscenequeryimg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026netscenequeryimg.proto\022\020netscenequeryi"
  "mg\"(\n\023NetSceneQueryImgReq\022\021\n\timg_bytes\030\001"
  " \001(\014\"\270\001\n\024NetSceneQueryImgResp\022I\n\titem_ty"
  "pe\030\001 \001(\0162/.netscenequeryimg.NetSceneQuer"
  "yImgResp.ItemType:\005PLANT\022\021\n\titem_name\030\002 "
  "\001(\t\022\021\n\titem_desc\030\003 \001(\t\"/\n\010ItemType\022\t\n\005PL"
  "ANT\020\000\022\n\n\006ANIMAL\020\001\022\014\n\010LANDMARK\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_netscenequeryimg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_netscenequeryimg_2eproto_sccs[2] = {
  &scc_info_NetSceneQueryImgReq_netscenequeryimg_2eproto.base,
  &scc_info_NetSceneQueryImgResp_netscenequeryimg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_netscenequeryimg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_netscenequeryimg_2eproto = {
  false, false, descriptor_table_protodef_netscenequeryimg_2eproto, "netscenequeryimg.proto", 271,
  &descriptor_table_netscenequeryimg_2eproto_once, descriptor_table_netscenequeryimg_2eproto_sccs, descriptor_table_netscenequeryimg_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_netscenequeryimg_2eproto::offsets,
  file_level_metadata_netscenequeryimg_2eproto, 2, file_level_enum_descriptors_netscenequeryimg_2eproto, file_level_service_descriptors_netscenequeryimg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_netscenequeryimg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_netscenequeryimg_2eproto)), true);
namespace netscenequeryimg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetSceneQueryImgResp_ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_netscenequeryimg_2eproto);
  return file_level_enum_descriptors_netscenequeryimg_2eproto[0];
}
bool NetSceneQueryImgResp_ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetSceneQueryImgResp_ItemType NetSceneQueryImgResp::PLANT;
constexpr NetSceneQueryImgResp_ItemType NetSceneQueryImgResp::ANIMAL;
constexpr NetSceneQueryImgResp_ItemType NetSceneQueryImgResp::LANDMARK;
constexpr NetSceneQueryImgResp_ItemType NetSceneQueryImgResp::ItemType_MIN;
constexpr NetSceneQueryImgResp_ItemType NetSceneQueryImgResp::ItemType_MAX;
constexpr int NetSceneQueryImgResp::ItemType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void NetSceneQueryImgReq::InitAsDefaultInstance() {
}
class NetSceneQueryImgReq::_Internal {
 public:
  using HasBits = decltype(std::declval<NetSceneQueryImgReq>()._has_bits_);
  static void set_has_img_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetSceneQueryImgReq::NetSceneQueryImgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:netscenequeryimg.NetSceneQueryImgReq)
}
NetSceneQueryImgReq::NetSceneQueryImgReq(const NetSceneQueryImgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  img_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_img_bytes()) {
    img_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_img_bytes(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:netscenequeryimg.NetSceneQueryImgReq)
}

void NetSceneQueryImgReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetSceneQueryImgReq_netscenequeryimg_2eproto.base);
  img_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NetSceneQueryImgReq::~NetSceneQueryImgReq() {
  // @@protoc_insertion_point(destructor:netscenequeryimg.NetSceneQueryImgReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetSceneQueryImgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  img_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetSceneQueryImgReq::ArenaDtor(void* object) {
  NetSceneQueryImgReq* _this = reinterpret_cast< NetSceneQueryImgReq* >(object);
  (void)_this;
}
void NetSceneQueryImgReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetSceneQueryImgReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetSceneQueryImgReq& NetSceneQueryImgReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetSceneQueryImgReq_netscenequeryimg_2eproto.base);
  return *internal_default_instance();
}


void NetSceneQueryImgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:netscenequeryimg.NetSceneQueryImgReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    img_bytes_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetSceneQueryImgReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes img_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_img_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetSceneQueryImgReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:netscenequeryimg.NetSceneQueryImgReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes img_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_img_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netscenequeryimg.NetSceneQueryImgReq)
  return target;
}

size_t NetSceneQueryImgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netscenequeryimg.NetSceneQueryImgReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes img_bytes = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_img_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetSceneQueryImgReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netscenequeryimg.NetSceneQueryImgReq)
  GOOGLE_DCHECK_NE(&from, this);
  const NetSceneQueryImgReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetSceneQueryImgReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netscenequeryimg.NetSceneQueryImgReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netscenequeryimg.NetSceneQueryImgReq)
    MergeFrom(*source);
  }
}

void NetSceneQueryImgReq::MergeFrom(const NetSceneQueryImgReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netscenequeryimg.NetSceneQueryImgReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_img_bytes()) {
    _internal_set_img_bytes(from._internal_img_bytes());
  }
}

void NetSceneQueryImgReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netscenequeryimg.NetSceneQueryImgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetSceneQueryImgReq::CopyFrom(const NetSceneQueryImgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netscenequeryimg.NetSceneQueryImgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetSceneQueryImgReq::IsInitialized() const {
  return true;
}

void NetSceneQueryImgReq::InternalSwap(NetSceneQueryImgReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  img_bytes_.Swap(&other->img_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NetSceneQueryImgReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetSceneQueryImgResp::InitAsDefaultInstance() {
}
class NetSceneQueryImgResp::_Internal {
 public:
  using HasBits = decltype(std::declval<NetSceneQueryImgResp>()._has_bits_);
  static void set_has_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NetSceneQueryImgResp::NetSceneQueryImgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:netscenequeryimg.NetSceneQueryImgResp)
}
NetSceneQueryImgResp::NetSceneQueryImgResp(const NetSceneQueryImgResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_name()) {
    item_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_item_name(),
      GetArena());
  }
  item_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_desc()) {
    item_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_item_desc(),
      GetArena());
  }
  item_type_ = from.item_type_;
  // @@protoc_insertion_point(copy_constructor:netscenequeryimg.NetSceneQueryImgResp)
}

void NetSceneQueryImgResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetSceneQueryImgResp_netscenequeryimg_2eproto.base);
  item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_type_ = 0;
}

NetSceneQueryImgResp::~NetSceneQueryImgResp() {
  // @@protoc_insertion_point(destructor:netscenequeryimg.NetSceneQueryImgResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetSceneQueryImgResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  item_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetSceneQueryImgResp::ArenaDtor(void* object) {
  NetSceneQueryImgResp* _this = reinterpret_cast< NetSceneQueryImgResp* >(object);
  (void)_this;
}
void NetSceneQueryImgResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetSceneQueryImgResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetSceneQueryImgResp& NetSceneQueryImgResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetSceneQueryImgResp_netscenequeryimg_2eproto.base);
  return *internal_default_instance();
}


void NetSceneQueryImgResp::Clear() {
// @@protoc_insertion_point(message_clear_start:netscenequeryimg.NetSceneQueryImgResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      item_desc_.ClearNonDefaultToEmpty();
    }
  }
  item_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetSceneQueryImgResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .netscenequeryimg.NetSceneQueryImgResp.ItemType item_type = 1 [default = PLANT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::netscenequeryimg::NetSceneQueryImgResp_ItemType_IsValid(val))) {
            _internal_set_item_type(static_cast<::netscenequeryimg::NetSceneQueryImgResp_ItemType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string item_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_item_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "netscenequeryimg.NetSceneQueryImgResp.item_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string item_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "netscenequeryimg.NetSceneQueryImgResp.item_desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetSceneQueryImgResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:netscenequeryimg.NetSceneQueryImgResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .netscenequeryimg.NetSceneQueryImgResp.ItemType item_type = 1 [default = PLANT];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_item_type(), target);
  }

  // optional string item_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_name().data(), static_cast<int>(this->_internal_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "netscenequeryimg.NetSceneQueryImgResp.item_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_item_name(), target);
  }

  // optional string item_desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_desc().data(), static_cast<int>(this->_internal_item_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "netscenequeryimg.NetSceneQueryImgResp.item_desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netscenequeryimg.NetSceneQueryImgResp)
  return target;
}

size_t NetSceneQueryImgResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netscenequeryimg.NetSceneQueryImgResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string item_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_name());
    }

    // optional string item_desc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_desc());
    }

    // optional .netscenequeryimg.NetSceneQueryImgResp.ItemType item_type = 1 [default = PLANT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_item_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetSceneQueryImgResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netscenequeryimg.NetSceneQueryImgResp)
  GOOGLE_DCHECK_NE(&from, this);
  const NetSceneQueryImgResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetSceneQueryImgResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netscenequeryimg.NetSceneQueryImgResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netscenequeryimg.NetSceneQueryImgResp)
    MergeFrom(*source);
  }
}

void NetSceneQueryImgResp::MergeFrom(const NetSceneQueryImgResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netscenequeryimg.NetSceneQueryImgResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_name(from._internal_item_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_item_desc(from._internal_item_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      item_type_ = from.item_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetSceneQueryImgResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netscenequeryimg.NetSceneQueryImgResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetSceneQueryImgResp::CopyFrom(const NetSceneQueryImgResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netscenequeryimg.NetSceneQueryImgResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetSceneQueryImgResp::IsInitialized() const {
  return true;
}

void NetSceneQueryImgResp::InternalSwap(NetSceneQueryImgResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_name_.Swap(&other->item_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_desc_.Swap(&other->item_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(item_type_, other->item_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetSceneQueryImgResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace netscenequeryimg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::netscenequeryimg::NetSceneQueryImgReq* Arena::CreateMaybeMessage< ::netscenequeryimg::NetSceneQueryImgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::netscenequeryimg::NetSceneQueryImgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::netscenequeryimg::NetSceneQueryImgResp* Arena::CreateMaybeMessage< ::netscenequeryimg::NetSceneQueryImgResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::netscenequeryimg::NetSceneQueryImgResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
